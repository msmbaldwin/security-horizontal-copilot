# Azure Security Documentation Generator

**Service Configuration:**
- `<Service>` = "XXX" (Replace with Azure service name)
- `<Docset>` = https://learn.microsoft.com/en-us/azure/XXX (Replace with service docset URL)

## Generation Instructions

You are GitHub Copilot generating a comprehensive security checklist article for the specified Azure service. Follow Microsoft Learn standards and use the template structure from `template.txt` and writing guidelines from `guide.txt`.

**Objective:** Create "Secure your <Service> deployment" - a checklist-style article with validated, service-specific security best practices optimized for both human readers and AI consumption.

## Generative Engine Optimization (GEO)

### AI Parseability Requirements
- **Structured Data Format**: Use consistent patterns and hierarchical organization for optimal AI parsing
- **Semantic Clarity**: Include explicit relationships between concepts using standardized language
- **Context Completeness**: Provide sufficient context in each section for standalone comprehension
- **Query Optimization**: Structure content to answer common security questions directly
- **Machine Readability**: Use predictable formatting patterns and clear section delineation

### AI-Optimized Content Patterns
- **Consistent Bullet Structure**: Follow exact pattern for AI pattern recognition
- **Explicit Categorization**: Use clear domain headers with consistent terminology
- **Action-Outcome Pairing**: Link each recommendation to specific security benefits
- **Progressive Information Architecture**: Order from foundational to advanced concepts
- **Cross-Reference Integration**: Include relevant links and related concepts for context building

### Metadata Enhancement
- **Service Taxonomy**: Include clear service classification and relationship indicators
- **Security Domain Mapping**: Explicitly categorize each recommendation by security domain
- **Implementation Complexity**: Indicate difficulty/effort level for each recommendation
- **Compliance Alignment**: Reference relevant standards and frameworks where applicable

## Research Strategy

### Primary Sources (Execute in Order)
1. **Service Documentation Search**: Use `mcp_microsoft_doc_microsoft_docs_search` with query: `<Service> security site:learn.microsoft.com`
2. **Security Baseline Check**: Search for Microsoft Cloud Security Benchmark at `/security/benchmark/azure/<service>`
3. **Architecture Guide Check**: Search for Well-Architected Framework guide at `/azure/well-architected/service-guides/<service>`

### Content Integration Rules
- **Primary Authority**: Service-specific documentation takes precedence
- **Supporting Evidence**: Include MCSB/WAF only when it aligns with current service docs
- **Validation Requirement**: All recommendations must be supported by current Microsoft Learn content
- **Specificity Filter**: Include only recommendations that apply directly to the target service
- **AI Accessibility**: Structure content for optimal consumption by language models and copilots

## Content Requirements

### Security Domains (Include Only Applicable)
- **Network Security** - Isolation, filtering, endpoint protection
- **Identity & Access Management** - Authentication, authorization, RBAC
- **Data Protection** - Encryption, key management, classification
- **Logging & Monitoring** - Audit trails, threat detection, alerts
- **Compliance & Governance** - Policy enforcement, regulatory compliance
- **Backup & Recovery** - Data protection, business continuity
- **Service-Specific Security** - Unique security controls for this service

### Quality Standards
- Every recommendation must link to authoritative Microsoft documentation
- Use relative paths (`/azure/...`) not full URLs
- No placeholder content or generic boilerplate
- Follow template structure exactly
- Apply writing guidelines for tone and formatting
- **GEO Compliance**: Ensure content is structured for optimal AI parsing and retrieval
- **Semantic Consistency**: Use standardized terminology and patterns throughout
- **Context Sufficiency**: Each section must be comprehensible without external context

### AI-Optimized Formatting Requirements
- **Predictable Structure**: Maintain consistent section ordering and bullet formatting
- **Explicit Relationships**: Use clear language to indicate dependencies and relationships
- **Searchable Content**: Include relevant keywords naturally within context
- **Hierarchical Organization**: Organize information from general to specific
- **Cross-Reference Clarity**: Make relationships between sections explicit

## Execution Process

1. **Research Phase**: Search Microsoft Learn for service-specific security guidance using the strategy above
2. **Content Generation**: Build article following `template.txt` structure and `guide.txt` standards
3. **GEO Optimization**: Structure content for optimal AI parsing and human readability
4. **Validation Phase**: Verify all recommendations are documented, current, service-specific, and AI-accessible
5. **Output**: Write complete Markdown article to the currently open file with enhanced parseability

**Additional GEO Validation Criteria:**
- Content follows predictable patterns for AI pattern recognition
- Each recommendation includes explicit action-benefit relationships
- Section introductions provide clear context and scope
- Links and references support both human navigation and AI context building
- Terminology remains consistent for semantic clarity

**Begin research and generation now.**
